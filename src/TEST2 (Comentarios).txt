ORI R1 R0 1

//----TESTEO FORWARDING ETAPA EXECUTE ---- 
ORI R2 R0 2
ORI R3 R2 12    // (2)R2 | 12 = (14)R3 
ANDI R4 R3 10   // (14)R3 | 10 = (10)R4  
//----------------------------------------
ADDI R10 R0 34
ADDU R5  R1 R2	 // (1)R1  + (2)R2  = (3)R5

//----TESTEO FORWARDING ETAPA EXECUTE ----
SUBU R6  R1 R2   // (1)R1  - (2)R2  = (-1)R6
AND  R7  R1 R3   // (8)R1  & (14)R3 = (8)R7
AND  R8  R1 R6   // (1)R1 & (-1)R6 = (1)R8
//----------------------------------------

SLL  R9 R3 6 	// R3(0000_1110) << 6 = R9(1100_0000)
SLLV R3 R6 R4   // R6('hFFFFFFFF) << 10 = R3('hFFFF?000)    
SH   R4 R1 0	// GUARDO EL VALOR (10)R4 EN EL LUGAR 1 DE MEMORIA   
ADDU R11 R1 R2        
ADDU R12 R1 R2 
SH   R3 R1 1	// GUARDO EL VALOR R3('h?000) EN EL LUGAR 2 DE MEMORIA
SB   R9 R1 2 	// GUARDO EL VALOR R9('b1100_0000) EN EL LUGAR 3 DE MEMORIA
SW   R3	R1 3    // GUARDO EL VALOR R3('hFFFF?000) EN EL LUGAR 4 DE MEMORIA
BNE  R1 R8 3
ANDI R8 R0 3
LW   R14 R1 0   // TRAIGO EL VALOR DE MEMORIA 1(10) Y LO GUARDO EN R14
ADDU R2 R1 R14  // (1)R1 + (10)R14 = (11)R2
LH   R16 R1 8	// CARGA EL VALOR ('hFFFF) EN EL REGISTRO R16
LHU  R17 R1 8	// CARGA EL VALOR ('hFFFF) EN EL REGISTRO R16
LB   R18 R1 16	// CARGA EL VALOR ('h?0) EN EL REGISTRO 16  
JAL  37		 
ADDU R1 R2 R11        
ADDU R1 R2 R12  
ADDU R1 R2 R11        
ADDU R1 R2 R12
ADDU R1 R2 R11        
ADDU R1 R2 R12

ESTE PROGRAMA TESTEA LAS INSTRUCCIONES TIPO-I, STORE HALFWORD,STORE BYTE,LOAD BYTE, LOAD HALFWORD, JUMP AND LINK, BRACH NOT EQUALS
LAS UNIDADES DE FORWARDING Y HAZARD
